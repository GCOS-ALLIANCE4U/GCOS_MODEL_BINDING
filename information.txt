ðŸ’œ PROJET SAP UI5 => MODEL BINDING ðŸ’š

https://www.youtube.com/watch?v=5rnVfV9ZR_Y

ðŸ’œ MODELS

Models are two types = > Client side and server side models. Models are containers which store data in it. When models are initialised in SAP UI5 framework, a couple of instance will be created. 
One instance is for basic model, one instance is for data binding. 

Data binding instance is initialized when you are initializing a model.

Models are used in case of data binding, to fetch and to communicate with the data base. Models are responsable to pull all data from data base to the fron end which is app that running on the browser. 

We have two types of data: 1) Which is available directly in your local file 2) The real time data which will be fetch from your database.

For SAP UI5, first we have to read data from data base, and store this data in model. After that the data will be pulled from the model to the table. For this reason we use data binding. 

We have two types of models => Client-Side Models and Server-Side Models

CLIENT SIDE MODELS => JSON Model, Resource Model, XML Model

SERVER SIDE MODELS => Odata V2 Model, Odata V4 Model

JSON => JavaScript Object Notation Data

To see the JSON data, go to the https://sapui5.hana.ondemand.com/#/api/sap.m.List

Then on this page inspect, and go to the network tab. 

Then click on this lien  https://sapui5.hana.ondemand.com/#/entity/sap.m.List

Then choose an example like sample : List - deletion, as soon as we choose a sample, the data will be read. 

In the table, we can see all the products which come from a json file. If we can search the json file, it is ProductCollection
file. When we double click on this file, we can see all the data as JSON format.

ðŸ’œ JSON data is very less if we compare with it XML data. We can see the size in the size tab. 

Then open OData Service https://www.odata.org/, click on the Developers and then Reference Services.

We have three OData version. V4, V3, V2; we will use V2

Open OData (read/write) Service this is xml structure. Here the data is in the xml format

Go to the Products 

First click it then write Products https://services.odata.org/V2/(S(trbi1k54c0ts1h0vpbloxdl4))/OData/OData.svc/

https://services.odata.org/V2/(S(trbi1k54c0ts1h0vpbloxdl4))/OData/OData.svc/Products

If I go to the Network tab, I can see the size of the this xml format = 1.9 kB

Now write it in the JSON format and then reload the page to see the difference (add ?$format=json) = 1.4kB

https://services.odata.org/V2/(S(trbi1k54c0ts1h0vpbloxdl4))/OData/OData.svc/Products?$format=json

ðŸ’œ JSON MODEL DECLARATION => two ways

    1) You can declare JSON model directly inside manifest.json file
    2) You can declare that model inside controller

ðŸ’š In this example, I will declare JSON model directly inside manifest.json. 

ðŸ’š Before we declare a JSON model, we need a data source to read data. 

ðŸ’šðŸ’š 1) First in the model folder, we create a local json file which is Product.json

ðŸ’š Next open SAP UI5 SDK https://sapui5.hana.ondemand.com/

ðŸ’š Then go to the samples and search for responsive tables

ðŸ’š Next open the developer tools (inspect) and go to the Network. Then open first example = table columns

ðŸ’š Search for product.json file and double click on it. Copy all data and paste it in the Product.json file

ðŸ’šðŸ’š 2) Then go to the manifest.json and create data source for json file.

ðŸ’š In manifest.json, in the sap.app dcelare dataSources. Inside add data source name = ProductJSONData

ðŸ’š Inside we declare our path for Product.json and type of our file

ðŸ’šðŸ’š 3) We have to assign DataSource to JSON Model

ðŸ’š Declare a model inside manifest, inside sap.ui5 section, we have models section in which we have i18n.

ðŸ’š i18n section, we can see model that have already been declared. We declare the second one = ProductJSONModel after that. 

ðŸ’š Inside our model, type is JSON, we have to declare class name as a type. To find the class name, go to the SAP UI5 SDK 

ðŸ’š Go to API Reference and search for JSONModel, copy class name and paste it as a class = sap.ui.model.json.JSONModel

ðŸ’š Then we need dataSource which has been already created and the name of dataSource is ProductJSONData

ðŸ’š We created our model inside manifest so it is accessible from anywhere, the scope is global

ðŸ’š If I declare the same model inside controller, the scope is local that means the model is available only for this controller. 

ðŸ’šðŸ’š 4) Bind json data from model to view or controller.

ðŸ’š Next go to the xml to create the table

ðŸ’š Some extensions : SAPUI5 extensions, UI5 Tools, ovly-ui5-snippets

ðŸ’š We will use responsive table, so go to the sap ui5 sdk, api reference and search for table. 

ðŸ’š This is class name and it belongs to sap.m library. class sap.m.Table

ðŸ’š In xml this library has been already declared. First create the titles of each column in xml, then we create the rows and bind data for each column

ðŸ’š tag <items> in the table is used to create the rows. 

ðŸ’š In table tag we pass these items by using items="{}" keyword to bind the data

ðŸ’š We have three types binding types => aggregation, element, property binding.

ðŸ’š Here we use aggregation binding

ðŸ’š In the Product.json file, we have two types of data, ProductCollection and ProductCollectionStats. We will use ProductColllection.

ðŸ’š SAPUI5 Extension is necessary to see the reference of the function. Install it. 

ðŸ’š Now we create a button inside footer. We will get a JSON model from manifets. 

ðŸ’š Open SAP SDK, search JSONModel. In the methods we can see that we have a couple of methods

ðŸ’š To declare a model inside controller there is a syntax in the constructor 

ðŸ’š new sap.ui.model.json.JSONModel(oData?, bObserve?)

ðŸ’š Next I want to set property, again visit SAP SDK, search for JSONModel and the method is setProperty()

ðŸ’š This method has some parameters setProperty(sPath, oValue, oContext?, bAsyncUpdate?) : boolean

ðŸ’š First put a break point => var oModel, line 24, then click on the get model button. Then open the console.

ðŸ’š You have an object like obj = {"name" : "GC", "age" : 20} 

ðŸ’š Add a property to this object => obj.gender = "female"

ðŸ’š To the console, write it => this.getOwnerComponent().getModel('ProductJSONModel').setProperty("/SampleProperty", {Name: 'SC', age: '8', gender: 'male'})

ðŸ’š The path SampleProperty, we gave this name, we can change it, it is path of the new property

ðŸ’š Then get data, you will see the all properties this.getOwnerComponent().getModel('ProductJSONModel').getData()

ðŸ’š To see the new property, or a simple property write these => 

ðŸ’š this.getOwnerComponent().getModel('ProductJSONModel').getProperty("/SampleProperty") 

ðŸ’š this.getOwnerComponent().getModel('ProductJSONModel').getProperty("/ProductCollection") 

ðŸ’š Then set the JSON model inside the Component. To do that first create createProductJSONmOdel in the model.js

ðŸ’š Next set the JSONModel inside the component

ðŸ’š Three types of binding modes => one way, two way, one time

ðŸ’š ONE WAY => data will flow from model to view

ðŸ’š TWO WAY => data will flow from model to view and also from view to model

ðŸ’š ONE TIME => data will flow from model to view only once





